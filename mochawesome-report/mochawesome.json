{
  "stats": {
    "suites": 4,
    "tests": 16,
    "passes": 16,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-30T09:57:54.561Z",
    "end": "2024-08-30T09:59:33.721Z",
    "duration": 99160,
    "testsRegistered": 16,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "505b5d3b-9acd-4d20-be45-33b5328c3b8b",
      "title": "",
      "fullFile": "D:\\Belajar\\UiAutomation\\Selenium_Webdriver\\learn\\swagLabs.js",
      "file": "\\swagLabs.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "f78f710a-d899-4cfe-9c89-7b34ecd386e9",
          "title": "Automation Test",
          "fullFile": "D:\\Belajar\\UiAutomation\\Selenium_Webdriver\\learn\\swagLabs.js",
          "file": "\\swagLabs.js",
          "beforeHooks": [],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Automation Test\"",
              "fullTitle": "Automation Test \"after all\" hook in \"Automation Test\"",
              "timedOut": false,
              "duration": 6874,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await driver.quit()",
              "err": {},
              "uuid": "7704cdc0-e03c-44ce-a8d8-b5f292a18713",
              "parentUUID": "f78f710a-d899-4cfe-9c89-7b34ecd386e9",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "908adefa-e45b-432c-8c51-22572c58a833",
              "title": "Login Page",
              "fullFile": "D:\\Belajar\\UiAutomation\\Selenium_Webdriver\\learn\\swagLabs.js",
              "file": "\\swagLabs.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: Navigate to the website in \"Login Page\"",
                  "fullTitle": "Automation Test Login Page \"before all\" hook: Navigate to the website in \"Login Page\"",
                  "timedOut": false,
                  "duration": 10815,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await driver.manage().window().maximize()\nawait navigate(baseUrl, '', '')\nawait takeAScreenshot('Login_Page')",
                  "err": {},
                  "uuid": "ca3825f2-b61e-4813-b8df-7e5a8c6e32be",
                  "parentUUID": "908adefa-e45b-432c-8c51-22572c58a833",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Login with empty fields",
                  "fullTitle": "Automation Test Login Page Login with empty fields",
                  "timedOut": false,
                  "duration": 1259,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await login()\nconst alertMessage = await driver\n  .findElement(locators.errorMessage)\n  .getText()\nassert.equal(alertMessage, 'Epic sadface: Username is required')\nawait takeAScreenshot('Login_EmptyField')\nawait clickButton(locators.closeButton)",
                  "err": {},
                  "uuid": "8a745f3e-b0d4-4dd2-812b-1d22ce33ab4b",
                  "parentUUID": "908adefa-e45b-432c-8c51-22572c58a833",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Login with empty username",
                  "fullTitle": "Automation Test Login Page Login with empty username",
                  "timedOut": false,
                  "duration": 797,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await refreshTheBrowser()\nawait login('', passwordAllUser)\nconst alertMessage = await driver\n  .findElement(locators.errorMessage)\n  .getText()\nassert.equal(alertMessage, 'Epic sadface: Username is required')\nawait takeAScreenshot('Login_EmptyUserName')\nawait clickButton(locators.closeButton)",
                  "err": {},
                  "uuid": "ab575309-5c48-4b65-903c-0c0a968e67af",
                  "parentUUID": "908adefa-e45b-432c-8c51-22572c58a833",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Login with empty password",
                  "fullTitle": "Automation Test Login Page Login with empty password",
                  "timedOut": false,
                  "duration": 546,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await refreshTheBrowser()\nawait login(standardUser, '')\nlet alertMessage = await driver\n  .findElement(locators.errorMessage)\n  .getText()\nassert.equal(alertMessage, 'Epic sadface: Password is required')\nawait takeAScreenshot('Login_EmptyPassword')\nawait clickButton(locators.closeButton)",
                  "err": {},
                  "uuid": "23a93466-1b6c-46f7-b3a1-b23dd5f92269",
                  "parentUUID": "908adefa-e45b-432c-8c51-22572c58a833",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Login with locked out user",
                  "fullTitle": "Automation Test Login Page Login with locked out user",
                  "timedOut": false,
                  "duration": 703,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await refreshTheBrowser()\nawait login(lockedOutUser, passwordAllUser)\nlet alertMessage = await driver\n  .findElement(locators.errorMessage)\n  .getText()\nassert.equal(\n  alertMessage,\n  'Epic sadface: Sorry, this user has been locked out.'\n)\nawait takeAScreenshot('Login_LockedOutUser')\nawait clickButton(locators.closeButton)",
                  "err": {},
                  "uuid": "087eedb5-2a2d-47af-a7d9-2b4036caa5ae",
                  "parentUUID": "908adefa-e45b-432c-8c51-22572c58a833",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Login with standard user",
                  "fullTitle": "Automation Test Login Page Login with standard user",
                  "timedOut": false,
                  "duration": 1253,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await refreshTheBrowser()\nawait login(standardUser, passwordAllUser)\nlet currentUrl = await driver.getCurrentUrl()\nassert.equal(currentUrl, 'https://www.saucedemo.com/inventory.html')\nawait takeAScreenshot('Login_Success')",
                  "err": {},
                  "uuid": "d30a7ab6-cfcf-410a-9467-a6d75b974d01",
                  "parentUUID": "908adefa-e45b-432c-8c51-22572c58a833",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8a745f3e-b0d4-4dd2-812b-1d22ce33ab4b",
                "ab575309-5c48-4b65-903c-0c0a968e67af",
                "23a93466-1b6c-46f7-b3a1-b23dd5f92269",
                "087eedb5-2a2d-47af-a7d9-2b4036caa5ae",
                "d30a7ab6-cfcf-410a-9467-a6d75b974d01"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 4558,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2147483647
            },
            {
              "uuid": "cd4c8ba8-084d-4320-90a2-b1749804c49c",
              "title": "Beranda",
              "fullFile": "D:\\Belajar\\UiAutomation\\Selenium_Webdriver\\learn\\swagLabs.js",
              "file": "\\swagLabs.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: Initialize product data in \"Beranda\"",
                  "fullTitle": "Automation Test Beranda \"before all\" hook: Initialize product data in \"Beranda\"",
                  "timedOut": false,
                  "duration": 637,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "productVolume = await driver.executeScript(\n  'return document.querySelectorAll(\\'div[data-test=\"inventory-item-description\"]\\').length'\n)\nproductNames = await getMultiItem(locators.productNames, productVolume)\nproductPrices = await getMultiItem(locators.productPrices, productVolume)",
                  "err": {},
                  "uuid": "5855e01c-a87d-4194-9fae-b1c745f8a6f8",
                  "parentUUID": "cd4c8ba8-084d-4320-90a2-b1749804c49c",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Check ascending & descending sort by name",
                  "fullTitle": "Automation Test Beranda Check ascending & descending sort by name",
                  "timedOut": false,
                  "duration": 3077,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const sortedNamesAsc = [...productNames].sort()\nconst sortedNamesDesc = [...productNames].sort().reverse()\nawait applySortingOption(locators.optionAscByName)\nconst displayedNamesAsc = await getMultiItem(\n  locators.productNames,\n  productVolume\n)\nassert.deepEqual(displayedNamesAsc, sortedNamesAsc)\nawait takeAScreenshot('Sort_AscendingByName')\nawait applySortingOption(locators.optionDscByName)\nconst displayedNamesDesc = await getMultiItem(\n  locators.productNames,\n  productVolume\n)\nassert.deepEqual(displayedNamesDesc, sortedNamesDesc)\nawait takeAScreenshot('Sort_DescendingByName')",
                  "err": {},
                  "uuid": "d807967d-9c15-4b52-8f31-d97cbd957fd7",
                  "parentUUID": "cd4c8ba8-084d-4320-90a2-b1749804c49c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check ascending & descending sort by price",
                  "fullTitle": "Automation Test Beranda Check ascending & descending sort by price",
                  "timedOut": false,
                  "duration": 4014,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let sortedPricesAsc = [...productPrices]\n  .map((price) => parseFloat(price.replace('$', '')))\n  .sort((a, b) => a - b)\nsortedPricesAsc = sortedPricesAsc.map((price) => `$${price.toFixed(2)}`)\nlet sortedPricesDesc = [...sortedPricesAsc].reverse()\nawait applySortingOption(locators.optionAscByPrice)\nlet displayedPricesAsc = await getMultiItem(\n  locators.productPrices,\n  productVolume\n)\nassert.deepEqual(displayedPricesAsc, sortedPricesAsc)\nawait takeAScreenshot('Sort_AscendingByPrice')\nawait applySortingOption(locators.optionDscByPrice)\nlet displayedPricesDesc = await getMultiItem(\n  locators.productPrices,\n  productVolume\n)\nassert.deepEqual(displayedPricesDesc, sortedPricesDesc)\nawait takeAScreenshot('Sort_DescendingByPrice')\nawait driver.sleep(1000)",
                  "err": {},
                  "uuid": "d52e6215-ca51-48f2-85c8-ea8ea76e8e75",
                  "parentUUID": "cd4c8ba8-084d-4320-90a2-b1749804c49c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check adding products to the cart",
                  "fullTitle": "Automation Test Beranda Check adding products to the cart",
                  "timedOut": false,
                  "duration": 965,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await clickMultiButton(locators.buttonAdd, productVolume)\nconst cartBadge = await driver.wait(\n  until.elementLocated(locators.shoppingCartBadge), 0\n)\nconst isDisplayed = await cartBadge.isDisplayed()\nassert.equal(isDisplayed, true)\nconst buttonVolume = await getMultiItem(\n  locators.buttonAdd,\n  productVolume\n)\nconst buttonRemoveVolume = (await [...buttonVolume]).filter(\n  (item) => item === 'Remove'\n)\nconst countBadge = await cartBadge.getText()\nassert.deepEqual(countBadge, buttonRemoveVolume.length)\n\nawait takeAScreenshot('Add_ProductToCart')",
                  "err": {},
                  "uuid": "385e061e-8991-4e3e-b559-346c593a8aec",
                  "parentUUID": "cd4c8ba8-084d-4320-90a2-b1749804c49c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check navigation to Cart page",
                  "fullTitle": "Automation Test Beranda Check navigation to Cart page",
                  "timedOut": false,
                  "duration": 432,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await navigate('', locators.cartButton, '')\nconst currentUrl = await driver.getCurrentUrl()\nassert.equal(currentUrl, 'https://www.saucedemo.com/cart.html')\nawait takeAScreenshot('Cart_page')",
                  "err": {},
                  "uuid": "f7524197-6223-4e3f-83dc-76376527bde3",
                  "parentUUID": "cd4c8ba8-084d-4320-90a2-b1749804c49c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check navigation to Detail Product page",
                  "fullTitle": "Automation Test Beranda Check navigation to Detail Product page",
                  "timedOut": false,
                  "duration": 446,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await navigate('', locators.continueShoppingButton, '')\nconst randomNumb = Math.floor(Math.random() * productVolume)\nconst cardTitleLink = By.xpath(\n  `(//a[@data-test=\"item-${randomNumb}-title-link\"])`\n)\nawait navigate('', cardTitleLink, '')\nconst currentUrl = await driver.getCurrentUrl()\nassert.equal(\n  currentUrl,\n  `https://www.saucedemo.com/inventory-item.html?id=${randomNumb}`\n)\nawait takeAScreenshot('Product_page')",
                  "err": {},
                  "uuid": "102e11ea-5dbc-4b35-9114-7cbacc0f485f",
                  "parentUUID": "cd4c8ba8-084d-4320-90a2-b1749804c49c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check navigation to social Twitter",
                  "fullTitle": "Automation Test Beranda Check navigation to social Twitter",
                  "timedOut": false,
                  "duration": 9141,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await navigate('', locators.backToProductsButton, '')\nawait navigate('', locators.socialTwitter, '')\nconst allTabs = await driver.getAllWindowHandles()\nawait driver.switchTo().window(allTabs[1])\nconst currentUrl = await driver.getCurrentUrl()\nassert(currentUrl, 'https://x.com/saucelabs')\nawait takeAScreenshot('Social_Twitter')\nawait driver.close()\nawait driver.switchTo().window(allTabs[0])",
                  "err": {},
                  "uuid": "69a818de-f5d3-4001-b30c-b22583247070",
                  "parentUUID": "cd4c8ba8-084d-4320-90a2-b1749804c49c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check navigation to social Facebook",
                  "fullTitle": "Automation Test Beranda Check navigation to social Facebook",
                  "timedOut": false,
                  "duration": 8896,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await navigate('', locators.socialFacebook, '')\nlet allTabs = await driver.getAllWindowHandles()\nawait driver.switchTo().window(allTabs[1])\nlet currentUrl = await driver.getCurrentUrl()\nassert(currentUrl, 'https://www.facebook.com/saucelabs')\nawait takeAScreenshot('Social_Facebook')\nawait driver.close()\nawait driver.switchTo().window(allTabs[0])",
                  "err": {},
                  "uuid": "ba88fc0e-5043-4c58-81fd-8c5869b0884d",
                  "parentUUID": "cd4c8ba8-084d-4320-90a2-b1749804c49c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check navigation to social Linkedin",
                  "fullTitle": "Automation Test Beranda Check navigation to social Linkedin",
                  "timedOut": false,
                  "duration": 9218,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await navigate('', locators.socialLinkedin, '')\nlet allTabs = await driver.getAllWindowHandles()\nawait driver.switchTo().window(allTabs[1])\nlet currentUrl = await driver.getCurrentUrl()\nassert(currentUrl, 'https://www.linkedin.com/company/sauce-labs/')\nawait takeAScreenshot('Social_Linkedin')\nawait driver.close()\nawait driver.switchTo().window(allTabs[0])",
                  "err": {},
                  "uuid": "276fcb23-0821-4725-8e5e-244cc009178c",
                  "parentUUID": "cd4c8ba8-084d-4320-90a2-b1749804c49c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check navigation to About",
                  "fullTitle": "Automation Test Beranda Check navigation to About",
                  "timedOut": false,
                  "duration": 37826,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await clickButton(locators.hamburgerButton)\nconst sidebar = await driver.wait(\n  until.elementLocated(locators.aboutSidebarLink)\n)\nawait driver.wait(until.elementIsVisible(sidebar), 2000)\nawait navigate('', locators.aboutSidebarLink, '')\nlet currentUrl = await driver.getCurrentUrl()\nassert(currentUrl, 'https://saucelabs.com/')\nawait takeAScreenshot('About')\nawait navigate('', '', 'back')",
                  "err": {},
                  "uuid": "ace04cde-f2ba-4181-9a71-8633fa432ad9",
                  "parentUUID": "cd4c8ba8-084d-4320-90a2-b1749804c49c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "Check reset app state",
                  "fullTitle": "Automation Test Beranda Check reset app state",
                  "timedOut": false,
                  "duration": 641,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await clickButton(locators.hamburgerButton)\nconst resetSidebar = await driver.wait(\n  until.elementLocated(locators.resetSidebarLink)\n)\nawait driver.wait(until.elementIsVisible(resetSidebar), 2000)\nawait clickButton(locators.resetSidebarLink)\nasync function verifyTheCartBadge() {\n  let isDisplayed = true\n  try {\n    const cartBadge = await driver.findElement(\n      locators.shoppingCartBadge\n    )\n    isDisplayed = await cartBadge.isDisplayed()\n  } catch (error) {\n    if (\n      error.name === 'NoSuchElementError' ||\n      error.name === 'NoSuchElementException'\n    ) {\n      isDisplayed = false\n    } else {\n      console.error(error)\n      throw error\n    }\n  }\n  assert.equal(isDisplayed, false)\n}\nawait verifyTheCartBadge()\nawait takeAScreenshot('Reset_Porduct')",
                  "err": {},
                  "uuid": "c9f59a19-6fba-41c4-8a54-e74508db1565",
                  "parentUUID": "cd4c8ba8-084d-4320-90a2-b1749804c49c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d807967d-9c15-4b52-8f31-d97cbd957fd7",
                "d52e6215-ca51-48f2-85c8-ea8ea76e8e75",
                "385e061e-8991-4e3e-b559-346c593a8aec",
                "f7524197-6223-4e3f-83dc-76376527bde3",
                "102e11ea-5dbc-4b35-9114-7cbacc0f485f",
                "69a818de-f5d3-4001-b30c-b22583247070",
                "ba88fc0e-5043-4c58-81fd-8c5869b0884d",
                "276fcb23-0821-4725-8e5e-244cc009178c",
                "ace04cde-f2ba-4181-9a71-8633fa432ad9",
                "c9f59a19-6fba-41c4-8a54-e74508db1565"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 74656,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2147483647
            },
            {
              "uuid": "d964cc36-38e9-486f-b5f6-58a90ab35289",
              "title": "Cart page",
              "fullFile": "D:\\Belajar\\UiAutomation\\Selenium_Webdriver\\learn\\swagLabs.js",
              "file": "\\swagLabs.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook: Add product to cart in \"Cart page\"",
                  "fullTitle": "Automation Test Cart page \"before all\" hook: Add product to cart in \"Cart page\"",
                  "timedOut": false,
                  "duration": 981,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "await refreshTheBrowser()\nawait clickMultiButton(locators.buttonAdd, productVolume)",
                  "err": {},
                  "uuid": "1213ac8b-944c-4b2b-81f4-16fad220797b",
                  "parentUUID": "d964cc36-38e9-486f-b5f6-58a90ab35289",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "Navigate to the cart page",
                  "fullTitle": "Automation Test Cart page Navigate to the cart page",
                  "timedOut": false,
                  "duration": 553,
                  "state": "passed",
                  "speed": "slow",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let buttonAddAndRemove = await getMultiItem(locators.buttonAdd, productVolume)\nlet removeButtonIndex = []\nbuttonAddAndRemove.forEach((button, index) => {\n  if (button === 'Remove') {\n    removeButtonIndex.push(index);\n  }\n})\n    \nlet productAddedToCart = []\nfor (let i = 0; i < removeButtonIndex.length; i++) {\n  let title = await driver\n    .findElement(\n      By.xpath(`${locators.productNames}[${removeButtonIndex[i] + 1}]`)\n    )\n    .getText()\n  productAddedToCart.push(title);\n}\n    \nawait navigate('', locators.cartButton, '')\n    \nlet cardVolume = await driver\n  .executeScript(\n    `return document.querySelectorAll(\\'div[data-test=\"inventory-item\"]\\').length`\n  )\nlet productInCart = await getMultiItem(locators.productNamesInCartPage, cardVolume)\nassert.deepEqual(productInCart.sort(), productAddedToCart.sort(), \"Produk di keranjang tidak sesuai dengan yang ditambahkan\")",
                  "err": {},
                  "uuid": "4b19cd03-9b6f-416f-aed9-b546d4e69d54",
                  "parentUUID": "d964cc36-38e9-486f-b5f6-58a90ab35289",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "4b19cd03-9b6f-416f-aed9-b546d4e69d54"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 553,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2147483647
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2147483647
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}